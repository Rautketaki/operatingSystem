//page replacement algo (FIFO,LRU,OPTIMAL)
//1.FIFO
#include<stdio.h>
int main()
{
    int referenceString[10], pageFaults=0,m, n, s,pages,frames;
    printf("\nEnter the number of pages:\t");
    scanf("%d",&pages);
    printf("\n enter reference string values:\n");
    for(m=0;m<pages;m++)
    {
        printf("Values No.[%d]:\t",m+1);
        scanf("%d",&referenceString[m]);
    }
    printf("what are the total number of frames:\t");
    {
        scanf("%d",&frames);

    }
    int temp[frames];
    for(m=0;m<frames;m++)
    {
        temp[m]=-1;

    }
    for(m=0;m<pages;m++)
    {
        s = 0;
        for(n=0;n<frames;n++)
        {
            if(referenceString[m]==temp[n])
            {
                s++;
                pageFaults--;
            }
        }
        pageFaults++;
        if((pageFaults<=frames)&&(s==0))
        {
            temp[m]=referenceString[m];
        }
        else if(s==0)

        {
            temp[(pageFaults-1)%frames]=referenceString[m];
        }
        printf("\n");
        for(n=0;n<frames;n++)
        {
            printf("%d\t",temp[n]);
        }
    }
    printf("\nTotal page fault:\t%d\n",pageFaults);
    return 0;

}

//2.LRU
int main()
{
   {

   } int no_of_frames,no_of_pages,frames[10],pages[30],
    counter=0,time[10],flag1,flag2,i,j,pos,faults=0;
    printf("enter number of frames:");
    scanf("%d",&no_of_frames);
    printf("enter number of pages:");
    scanf("%d",&no_of_pages);
    for(i=0;i<no_of_pages;++i){
        scanf("%d",&pages[i]);
    }
    for(i=o;i<no_of_frames;++i){
        frames=-1;
    }
    for(i=0;i<no_of_pages;++i){
        flag1=flag2=0;

        for(j=0;j<no_of_frames;++j){
            if(frames[j]==pages[i]){
                counter++;
                time[j]=counter;
                flag1=flag2=1;
                break;
            }
        }
        if(flag1==0){
            for(j=0;j<no_of_frames;++j){}
            if(frames[j]==-1){
                counter++;
                faults++;
                frame[j]=pages[i];
                time[j]=counter;
                flag2=1;
                break;
            }
        }
    }
    if(flag2==0){
        pos=findLRU(time,no_of_frames);
        counter++;
        faults++;
        frames[pos]=pages[i];
        time[pos]=counter;

    }
    printf("\n");
    for(j=0;j<no_of_frames;++j){
        printf("%d\t",frames[j]);
    }
}
printf("\n\nTotal page fault=%d",fault);
return 0;
}


