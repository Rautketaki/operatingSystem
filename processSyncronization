//dining
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>

sem_t room;           // counting semaphore
sem_t chopstick[5];   // binary semaphore

void * philosopher(void *);
void eat(int);

void eat(int phil)
{
	printf("\nPhilosopher %d is eating",phil);
}

int main()
{
	int i,a[5];
	pthread_t tid[5];       // creation of threads refering to 5 philosophers
	
	sem_init(&room,0,4);   // initializations of semaphore  varring from 0 to 4.
	
	for(i=0;i<5;i++)        
		sem_init(&chopstick[i],0,1);  //initializations of binary semaphore .   
		
	for(i=0;i<5;i++){
		a[i]=i;
		pthread_create(&tid[i],NULL,philosopher,(void *)&a[i]);  // creation of philosopher and assigning it a number.
	}
	for(i=0;i<5;i++)
		pthread_join(tid[i],NULL);  // waits until a thread gets terminated
}

void * philosopher(void * num)
{
	int phil=*(int *)num;

	sem_wait(&room);                         // semaphore function to checks if resources are available.
	printf("\nPhilosopher %d has entered room",phil);
	sem_wait(&chopstick[phil]);              // semaphore function to checks if chopstick is available.
	sem_wait(&chopstick[(phil+1)%5]);

	eat(phil);
	sleep(2);
	printf("\nPhilosopher %d has finished eating",phil);

	sem_post(&chopstick[(phil+1)%5]);   // gives confirmation if semophore is released successfully 
	sem_post(&chopstick[phil]);
	sem_post(&room);
  
}


//semaphhore
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
sem_t empty, full;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void* producer(void* arg) {
    int item = (int)arg;

    sem_wait(&empty);
    pthread_mutex_lock(&mutex);

    // Produce item
    printf("Producer produced item %d\n", item);

    pthread_mutex_unlock(&mutex);
    sem_post(&full);

    return NULL;
}

void* consumer(void* arg) {
    int item;

    sem_wait(&full);
    pthread_mutex_lock(&mutex);

    // Consume item
    printf("Consumer consumed item %d\n", buffer[item]);

    pthread_mutex_unlock(&mutex);
    sem_post(&empty);

    return NULL;
}

int main() {
    pthread_t producers[5], consumers[5];
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);

    for (int i = 0; i < 5; i++) {
        pthread_create(&producers[i], NULL, producer, (void*)i);
        pthread_create(&consumers[i], NULL, consumer, NULL);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(producers[i], NULL);
        pthread_join(consumers[i], NULL);
    }

    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
//mutex
#include <stdio.h>
#include <pthread.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int readerCount = 0;

void* reader(void* arg) {
    pthread_mutex_lock(&mutex);
    readerCount++;
    if (readerCount == 1) {
        // First reader, lock the resource
        printf("Reader %d is reading\n", (int)arg);
    }
    pthread_mutex_unlock(&mutex);

    // Reading

    pthread_mutex_lock(&mutex);
    readerCount--;
    if (readerCount == 0) {
        // Last reader, release the resource
        printf("Reader %d finished reading\n", (int)arg);
    }
    pthread_mutex_unlock(&mutex);

    return NULL;
}

void* writer(void* arg) {
    // Writing
    printf("Writer %d is writing\n", (int)arg);

    return NULL;
}

int main() {
    pthread_t readers[5], writers[5];

    for (int i = 0; i < 5; i++) {
        pthread_create(&readers[i], NULL, reader, (void*)i);
        pthread_create(&writers[i], NULL, writer, (void*)i);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    return 0;
}
