#include <stdio.h>

// Process structure
struct Process {
    int id;
    int burstTime;
    int remainingTime;
    int arrivalTime;
    int priority;
};

// Function to simulate Shortest Remaining Time First (SRTF) scheduling algorithm
void srtfScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int shortestIndex = -1;
        int shortestTime = __INT_MAX__;

        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0 && processes[i].burstTime < shortestTime && processes[i].arrivalTime <= currentTime) {
                shortestTime = processes[i].burstTime;
                shortestIndex = i;
            }
        }

        if (shortestIndex == -1) {
            currentTime++;
        } else {
            printf("Time %d: Executing process %d\n", currentTime, processes[shortestIndex].id);
            processes[shortestIndex].remainingTime--;
            currentTime++;

            if (processes[shortestIndex].remainingTime == 0) {
                completedProcesses++;
            }
        }
    }
}

// Function to simulate Round Robin scheduling algorithm
void roundRobinScheduling(struct Process processes[], int n, int timeQuantum) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                printf("Time %d: Executing process %d\n", currentTime, processes[i].id);

                if (processes[i].remainingTime > timeQuantum) {
                    processes[i].remainingTime -= timeQuantum;
                    currentTime += timeQuantum;
                } else {
                    currentTime += processes[i].remainingTime;
                    processes[i].remainingTime = 0;
                    completedProcesses++;
                }
            }
        }
    }
}

// Function to simulate Priority (Preemptive) scheduling algorithm
void priorityPreemptiveScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int highestPriorityIndex = -1;
        int highestPriority = __INT_MAX__;

        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0 && processes[i].priority < highestPriority) {
                highestPriority = processes[i].priority;
                highestPriorityIndex = i;
            }
        }

        if (highestPriorityIndex == -1) {
            currentTime++;
        } else {
            printf("Time %d: Executing process %d\n", currentTime, processes[highestPriorityIndex].id);
            processes[highestPriorityIndex].remainingTime--;
            currentTime++;

            if (processes[highestPriorityIndex].remainingTime == 0) {
                completedProcesses++;
            }
        }
    }
}

int main() {
    // Example processes
    struct Process processes[] = {
        {1, 6, 6, 0, 2},
        {2, 8, 8, 1, 1},
        {3, 7, 7, 2, 3},
        {4, 3, 3, 3, 4}
    };

    int n = sizeof(processes) / sizeof(processes[0]);

    printf("Shortest Remaining Time First (SRTF):\n");
    srtfScheduling(processes, n);

    printf("\nRound Robin:\n");
    roundRobinScheduling(processes, n, 2); // Assuming time quantum is 2

    printf("\nPriority (Preemptive):\n");
    priorityPreemptiveScheduling(processes, n);

    return 0;
}
