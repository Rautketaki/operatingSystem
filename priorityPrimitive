#include <stdio.h>

struct Process {
    int id;
    int burstTime;
    int priority;
};

void priorityPreemptiveScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < n) {
        int highestPriorityIndex = -1;
        int highestPriority = __INT_MAX__;

        for (int i = 0; i < n; i++) {
            if (processes[i].burstTime > 0 && processes[i].priority < highestPriority) {
                highestPriority = processes[i].priority;
                highestPriorityIndex = i;
            }
        }

        if (highestPriorityIndex == -1) {
            currentTime++;
        } else {
            printf("Executing process %d for time unit %d\n", processes[highestPriorityIndex].id, currentTime);
            processes[highestPriorityIndex].burstTime--;
            currentTime++;

            if (processes[highestPriorityIndex].burstTime == 0) {
                completedProcesses++;
            }
        }
    }
}

int main() {
    struct Process processes[] = {
        {1, 6, 2},
        {2, 8, 1},
        {3, 7, 3},
        {4, 3, 4}
    };

    int n = sizeof(processes) / sizeof(processes[0]);

    priorityPreemptiveScheduling(processes, n);

    return 0;
}

//priority non preemptive
#include <stdio.h>

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int PID[n], Priority[n], AT[n], BT[n], CT[n], TAT[n], WT[n], min, t;
    float AvgTAT = 0, AvgWT = 0, TotalTAT = 0, TotalWT = 0;

    for (int i = 0; i < n; i++) {
        printf("Enter the PID: ");
        scanf("%d", &PID[i]);

        printf("Enter Priority: ");
        scanf("%d", &Priority[i]);

        printf("Enter AT: ");
        scanf("%d", &AT[i]);

        printf("Enter BT: ");
        scanf("%d", &BT[i]);
    }

    // Priority Sorting (using bubble sort)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (Priority[j] > Priority[j + 1]) {
                // Swap priority, AT, BT, and PID
                t = Priority[j];
                Priority[j] = Priority[j + 1];
                Priority[j + 1] = t;

                t = AT[j];
                AT[j] = AT[j + 1];
                AT[j + 1] = t;

                t = BT[j];
                BT[j] = BT[j + 1];
                BT[j + 1] = t;

                t = PID[j];
                PID[j] = PID[j + 1];
                PID[j + 1] = t;
            }
        }
    }

    int currentTime = 0;
    printf("\nPID\t Priority\t AT\t BT\t TAT\t WT\n");
    for (int i = 0; i < n; i++) {
        if (AT[i] > currentTime) {
            currentTime = AT[i];
        }

        CT[i] = currentTime + BT[i];
        TAT[i] = CT[i] - AT[i];
        WT[i] = TAT[i] - BT[i];

        TotalTAT += TAT[i];
        TotalWT += WT[i];

        printf("%d\t %d\t\t %d\t %d\t %d\t %d\n", PID[i], Priority[i], AT[i], BT[i], TAT[i], WT[i]);

        currentTime += BT[i];
    }

    printf("\nAverage Waiting time is %.2f\n", TotalWT / n);
    printf("Average Turn Around Time is %.2f\n", TotalTAT / n);

    return 0;
}
